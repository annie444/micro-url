//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};


#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    utoipa :: ToSchema,
    ts_rs :: TS,
)]
#[sea_orm(table_name = "short_link")]
#[ts(export)]
#[ts(rename = "ShortLink")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    #[sea_orm(unique)]
    pub short_url: String,
    pub original_url: String,
    #[ts(optional)]
    pub user_id: Option<Uuid>,
    #[ts(optional)]
    pub expiry_date: Option<DateTime>,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::UserId",
        to = "super::user::Column::UserId",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    User,
    #[sea_orm(has_many = "super::views::Entity")]
    Views,
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl Related<super::views::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Views.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
