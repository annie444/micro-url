//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Serialize,
    Deserialize,
    utoipa :: ToSchema,
    ts_rs :: TS,
)]
#[sea_orm(table_name = "location")]
#[ts(export)]
#[ts(export_to = "../../../js/frontend/src/lib/types/")]
#[ts(rename = "Location")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(column_type = "Double", nullable)]
    pub latitude: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub longitude: Option<f64>,
    pub metro_code: Option<i32>,
    pub time_code: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::views::Entity")]
    Views,
}

impl Related<super::views::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Views.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
