//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.7

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    utoipa :: ToSchema,
    ts_rs :: TS,
)]
#[sea_orm(table_name = "user")]
#[ts(export)]
#[ts(export_to = "../../../js/frontend/src/lib/types/")]
#[ts(rename = "User")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub user_id: Uuid,
    pub name: String,
    #[sea_orm(unique)]
    pub email: String,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::sessions::Entity")]
    Sessions,
    #[sea_orm(has_many = "super::short_link::Entity")]
    ShortLink,
    #[sea_orm(has_many = "super::user_pass::Entity")]
    UserPass,
}

impl Related<super::sessions::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Sessions.def()
    }
}

impl Related<super::short_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ShortLink.def()
    }
}

impl Related<super::user_pass::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserPass.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
