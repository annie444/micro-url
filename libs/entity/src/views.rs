//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.8

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};


#[derive(
    Clone,
    Debug,
    PartialEq,
    DeriveEntityModel,
    Eq,
    Serialize,
    Deserialize,
    utoipa :: ToSchema,
    ts_rs :: TS,
)]
#[sea_orm(table_name = "views")]
#[ts(export)]
#[ts(export)]
#[ts(rename = "Views")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub short_link: String,
    #[sea_orm(column_type = "JsonBinary", nullable)]
    #[ts(optional)]
    pub headers: Option<Json>,
    #[sea_orm(column_type = "custom(\"inet\")", nullable)]
    #[ts(optional, as = "Option<String>")]
    #[schema(value_type = Option<String>)]
    pub ip: Option<IpNetwork>,
    pub cache_hit: bool,
    pub created_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::short_link::Entity",
        from = "Column::ShortLink",
        to = "super::short_link::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    ShortLink,
}

impl Related<super::short_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::ShortLink.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
