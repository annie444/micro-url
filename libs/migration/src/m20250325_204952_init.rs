use sea_orm_migration::{prelude::*, schema::*};

use crate::table_types::*;

#[derive(DeriveMigrationName)]
pub struct Migration;

#[async_trait::async_trait]
impl MigrationTrait for Migration {
    async fn up(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .create_table(
                Table::create()
                    .table(ShortLink::Table)
                    .if_not_exists()
                    .col(string(ShortLink::Id).primary_key().not_null().unique_key())
                    .col(string(ShortLink::ShortUrl).unique_key())
                    .col(string(ShortLink::OriginalUrl))
                    .col(uuid_null(ShortLink::UserId))
                    .col(timestamp_null(ShortLink::ExpiryDate))
                    .col(timestamp(ShortLink::CreatedAt))
                    .col(timestamp(ShortLink::UpdatedAt))
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(Views::Table)
                    .if_not_exists()
                    .col(pk_auto(Views::Id))
                    .col(string(Views::ShortLink).not_null())
                    .col(json_binary_null(Views::Headers))
                    .col(ColumnDef::new(Views::Ip).inet().null())
                    .col(boolean(Views::CacheHit))
                    .col(timestamp(Views::CreatedAt))
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(User::Table)
                    .if_not_exists()
                    .col(pk_uuid(User::UserId))
                    .col(string(User::Name))
                    .col(string(User::Email).unique_key())
                    .col(timestamp(User::CreatedAt))
                    .col(timestamp(User::UpdatedAt))
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(UserPass::Table)
                    .if_not_exists()
                    .col(pk_auto(UserPass::Id))
                    .col(uuid(UserPass::UserId))
                    .col(string(UserPass::Password))
                    .to_owned(),
            )
            .await?;
        manager
            .create_table(
                Table::create()
                    .table(Sessions::Table)
                    .if_not_exists()
                    .col(pk_auto(Sessions::Id))
                    .col(string(Sessions::SessionId))
                    .col(uuid(Sessions::UserId))
                    .col(timestamp(Sessions::Expiry))
                    .to_owned(),
            )
            .await?;
        manager
            .create_index(
                Index::create()
                    .table(ShortLink::Table)
                    .name(ShortLinkIdx::ShortUrl)
                    .col(ShortLink::ShortUrl)
                    .to_owned(),
            )
            .await?;
        manager
            .create_index(
                Index::create()
                    .table(ShortLink::Table)
                    .name(ShortLinkIdx::ExpiryDate)
                    .col(ShortLink::ExpiryDate)
                    .to_owned(),
            )
            .await?;
        manager
            .create_index(
                Index::create()
                    .table(Sessions::Table)
                    .name(SessionsIdx::SessionId)
                    .col(Sessions::SessionId)
                    .to_owned(),
            )
            .await?;
        manager
            .create_foreign_key(
                ForeignKey::create()
                    .name(ShortLinkFk::UserId)
                    .from(ShortLink::Table, ShortLink::UserId)
                    .to(User::Table, User::UserId)
                    .on_delete(ForeignKeyAction::Cascade)
                    .on_update(ForeignKeyAction::Cascade)
                    .to_owned(),
            )
            .await?;
        manager
            .create_foreign_key(
                ForeignKey::create()
                    .name(UserPassFk::UserId)
                    .from(UserPass::Table, UserPass::UserId)
                    .to(User::Table, User::UserId)
                    .on_delete(ForeignKeyAction::Cascade)
                    .on_update(ForeignKeyAction::Cascade)
                    .to_owned(),
            )
            .await?;
        manager
            .create_foreign_key(
                ForeignKey::create()
                    .name(SessionsFk::UserId)
                    .from(Sessions::Table, Sessions::UserId)
                    .to(User::Table, User::UserId)
                    .on_delete(ForeignKeyAction::Cascade)
                    .on_update(ForeignKeyAction::Cascade)
                    .to_owned(),
            )
            .await?;
        manager
            .create_foreign_key(
                ForeignKey::create()
                    .name(ViewsFk::ShortLink)
                    .from(Views::Table, Views::ShortLink)
                    .to(ShortLink::Table, ShortLink::Id)
                    .on_delete(ForeignKeyAction::Cascade)
                    .on_update(ForeignKeyAction::Cascade)
                    .to_owned(),
            )
            .await
    }

    async fn down(&self, manager: &SchemaManager) -> Result<(), DbErr> {
        manager
            .drop_index(
                Index::drop()
                    .table(ShortLink::Table)
                    .name(ShortLinkIdx::ShortUrl)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_index(
                Index::drop()
                    .table(ShortLink::Table)
                    .name(ShortLinkIdx::ExpiryDate)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_index(
                Index::drop()
                    .table(Sessions::Table)
                    .name(SessionsIdx::SessionId)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(ShortLink::Table)
                    .name(ShortLinkFk::UserId)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(UserPass::Table)
                    .name(UserPassFk::UserId)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(Sessions::Table)
                    .name(SessionsFk::UserId)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_foreign_key(
                ForeignKey::drop()
                    .table(Views::Table)
                    .name(ViewsFk::ShortLink)
                    .to_owned(),
            )
            .await?;
        manager
            .drop_table(Table::drop().table(ShortLink::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(UserPass::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(Sessions::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(User::Table).to_owned())
            .await?;
        manager
            .drop_table(Table::drop().table(Views::Table).to_owned())
            .await
    }
}
